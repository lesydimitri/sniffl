name: Build and Upload Release Binaries
permissions:
  contents: write

on:
  release:
    types: [published]

jobs:
  # Linux and OpenBSD builds (no CGO needed)
  build-unix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, openbsd]
        arch: [amd64, arm64]
    steps:
      - name: üöö Checkout source
        uses: actions/checkout@v4
      - name: üß∞ Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
      - name: üèóÔ∏è Build ${{ matrix.os }}-${{ matrix.arch }}
        env:
          VERSION: ${{ github.event.release.tag_name }}
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
        run: |
          mkdir -p dist
          OUT="sniffl-${GOOS}-${GOARCH}"
          go build -ldflags "-X github.com/lesydimitri/sniffl/cmd/sniffl/cmd.version=${VERSION}" -o "dist/${OUT}" ./cmd/sniffl
      - name: üì¶ Upload asset (${{ matrix.os }}-${{ matrix.arch }})
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Windows builds (no CGO needed)
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: üöö Checkout source
        uses: actions/checkout@v4
      - name: üß∞ Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
      - name: üèóÔ∏è Build windows-${{ matrix.arch }}
        env:
          VERSION: ${{ github.event.release.tag_name }}
          GOOS: windows
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
        shell: bash
        run: |
          mkdir -p dist
          OUT="sniffl-windows-${GOARCH}.exe"
          go build -ldflags "-X github.com/lesydimitri/sniffl/cmd/sniffl/cmd.version=${VERSION}" -o "dist/${OUT}" ./cmd/sniffl
      - name: üì¶ Upload asset (windows-${{ matrix.arch }})
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # macOS builds (CGO required for Security.framework)
  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: üöö Checkout source
        uses: actions/checkout@v4
      - name: üß∞ Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
      - name: üèóÔ∏è Build darwin-${{ matrix.arch }}
        env:
          VERSION: ${{ github.event.release.tag_name }}
          GOOS: darwin
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 1
        run: |
          mkdir -p dist
          OUT="sniffl-darwin-${GOARCH}"
          # SDK is available on macOS runners; cgo picks up -framework Security from source.
          go build -ldflags "-X github.com/lesydimitri/sniffl/cmd/sniffl/cmd.version=${VERSION}" -o "dist/${OUT}" ./cmd/sniffl
      - name: üì¶ Upload asset (darwin-${{ matrix.arch }})
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}